{"ast":null,"code":"import _classCallCheck from \"/Users/leesanghoon/Desktop/\\u1112\\u1161\\u11A8\\u1100\\u116D\\u1109\\u1162\\u11BC\\u1112\\u116A\\u11AF/\\u110F\\u1165\\u11B7\\u1111\\u1172\\u1110\\u1165 \\u1102\\u1166\\u1110\\u1173\\u110B\\u116F\\u110F\\u1173/\\u1100\\u116A\\u110C\\u1166/termp2/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nvar OperandCal = function OperandCal() {\n  var _this = this;\n\n  _classCallCheck(this, OperandCal);\n\n  this.element = [\"cos\", \"sin\", \"^\", \"CE\", 7, 8, 9, \"/\", 4, 5, 6, \"x\", 1, 2, 3, \"-\", 0, \".\", \"=\", \"+\"];\n\n  this.isNumber = function (inputValue) {\n    return !isNaN(inputValue);\n  };\n\n  this.isValid = function (inputValue, mathExpression) {\n    var prevValue = mathExpression.substr(mathExpression.length - 1);\n    return _this.checkValid(inputValue, prevValue);\n  };\n\n  this.checkValid = function (inputValue, prevValue) {\n    if (_this.isNumber(inputValue)) {\n      return true;\n    } else if (_this.isOperand(inputValue)) {\n      return _this.appendOperand(inputValue, prevValue);\n    } else if (_this.isTrigonometricFunction(inputValue)) {\n      if (eval(prevValue) >= 0 && eval(prevValue) <= 9) return false;else return true;\n    }\n  };\n\n  this.isOperand = function (inputValue) {\n    if (inputValue === \"+\" || inputValue === \"/\" || inputValue === \"-\" || inputValue === \"x\" || inputValue === \"^\") return true;\n    return false;\n  };\n\n  this.isTrigonometricFunction = function (inputValue) {\n    if (inputValue === \"cos\" || inputValue === \"sin\") return true;\n    return false;\n  };\n\n  this.appendOperand = function (inputValue, prevValue) {\n    if (inputValue === \"-\") {\n      if (prevValue === \"-\") return false;\n      return true;\n    } else if (_this.isOperand(prevValue)) {\n      return false;\n    }\n\n    return true;\n  };\n};\n\nexport { OperandCal as default };","map":{"version":3,"sources":["/Users/leesanghoon/Desktop/학교생활/컴퓨터 네트워크/과제/termp2/client/src/OperandCal.js"],"names":["OperandCal","element","isNumber","inputValue","isNaN","isValid","mathExpression","prevValue","substr","length","checkValid","isOperand","appendOperand","isTrigonometricFunction","eval"],"mappings":";;IAAqBA,U;;;;;OACnBC,O,GAAU,CACR,KADQ,EAER,KAFQ,EAGR,GAHQ,EAIR,IAJQ,EAKR,CALQ,EAMR,CANQ,EAOR,CAPQ,EAQR,GARQ,EASR,CATQ,EAUR,CAVQ,EAWR,CAXQ,EAYR,GAZQ,EAaR,CAbQ,EAcR,CAdQ,EAeR,CAfQ,EAgBR,GAhBQ,EAiBR,CAjBQ,EAkBR,GAlBQ,EAmBR,GAnBQ,EAoBR,GApBQ,C;;OAuBVC,Q,GAAW,UAAAC,UAAU,EAAI;AACvB,WAAO,CAACC,KAAK,CAACD,UAAD,CAAb;AACD,G;;OAEDE,O,GAAU,UAACF,UAAD,EAAaG,cAAb,EAAgC;AACxC,QAAMC,SAAS,GAAGD,cAAc,CAACE,MAAf,CAAsBF,cAAc,CAACG,MAAf,GAAwB,CAA9C,CAAlB;AAEA,WAAO,KAAI,CAACC,UAAL,CAAgBP,UAAhB,EAA4BI,SAA5B,CAAP;AACD,G;;OAEDG,U,GAAa,UAACP,UAAD,EAAaI,SAAb,EAA2B;AACtC,QAAI,KAAI,CAACL,QAAL,CAAcC,UAAd,CAAJ,EAA+B;AAC7B,aAAO,IAAP;AACD,KAFD,MAEO,IAAI,KAAI,CAACQ,SAAL,CAAeR,UAAf,CAAJ,EAAgC;AACrC,aAAO,KAAI,CAACS,aAAL,CAAmBT,UAAnB,EAA+BI,SAA/B,CAAP;AACD,KAFM,MAEA,IAAI,KAAI,CAACM,uBAAL,CAA6BV,UAA7B,CAAJ,EAA8C;AACnD,UAAIW,IAAI,CAACP,SAAD,CAAJ,IAAmB,CAAnB,IAAwBO,IAAI,CAACP,SAAD,CAAJ,IAAmB,CAA/C,EAAkD,OAAO,KAAP,CAAlD,KACK,OAAO,IAAP;AACN;AACF,G;;OAEDI,S,GAAY,UAAAR,UAAU,EAAI;AACxB,QACEA,UAAU,KAAK,GAAf,IACAA,UAAU,KAAK,GADf,IAEAA,UAAU,KAAK,GAFf,IAGAA,UAAU,KAAK,GAHf,IAIAA,UAAU,KAAK,GALjB,EAOE,OAAO,IAAP;AACF,WAAO,KAAP;AACD,G;;OAEDU,uB,GAA0B,UAAAV,UAAU,EAAI;AACtC,QAAIA,UAAU,KAAK,KAAf,IAAwBA,UAAU,KAAK,KAA3C,EAAkD,OAAO,IAAP;AAClD,WAAO,KAAP;AACD,G;;OAEDS,a,GAAgB,UAACT,UAAD,EAAaI,SAAb,EAA2B;AACzC,QAAIJ,UAAU,KAAK,GAAnB,EAAwB;AACtB,UAAII,SAAS,KAAK,GAAlB,EAAuB,OAAO,KAAP;AACvB,aAAO,IAAP;AACD,KAHD,MAGO,IAAI,KAAI,CAACI,SAAL,CAAeJ,SAAf,CAAJ,EAA+B;AACpC,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD,G;;;SAtEkBP,U","sourcesContent":["export default class OperandCal {\n  element = [\n    \"cos\",\n    \"sin\",\n    \"^\",\n    \"CE\",\n    7,\n    8,\n    9,\n    \"/\",\n    4,\n    5,\n    6,\n    \"x\",\n    1,\n    2,\n    3,\n    \"-\",\n    0,\n    \".\",\n    \"=\",\n    \"+\"\n  ];\n\n  isNumber = inputValue => {\n    return !isNaN(inputValue);\n  };\n\n  isValid = (inputValue, mathExpression) => {\n    const prevValue = mathExpression.substr(mathExpression.length - 1);\n\n    return this.checkValid(inputValue, prevValue);\n  };\n\n  checkValid = (inputValue, prevValue) => {\n    if (this.isNumber(inputValue)) {\n      return true;\n    } else if (this.isOperand(inputValue)) {\n      return this.appendOperand(inputValue, prevValue);\n    } else if (this.isTrigonometricFunction(inputValue)) {\n      if (eval(prevValue) >= 0 && eval(prevValue) <= 9) return false;\n      else return true;\n    }\n  };\n\n  isOperand = inputValue => {\n    if (\n      inputValue === \"+\" ||\n      inputValue === \"/\" ||\n      inputValue === \"-\" ||\n      inputValue === \"x\" ||\n      inputValue === \"^\"\n    )\n      return true;\n    return false;\n  };\n\n  isTrigonometricFunction = inputValue => {\n    if (inputValue === \"cos\" || inputValue === \"sin\") return true;\n    return false;\n  };\n\n  appendOperand = (inputValue, prevValue) => {\n    if (inputValue === \"-\") {\n      if (prevValue === \"-\") return false;\n      return true;\n    } else if (this.isOperand(prevValue)) {\n      return false;\n    }\n    return true;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}